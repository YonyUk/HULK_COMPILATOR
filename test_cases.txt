type Person(firstname, lastname) {firstname = firstname;lastname = lastname;name() => self.firstname @@ self.lastname;}
type Knight inherits Person { name() => "Sir" @@ base();} let p = new Knight("Phil", "Collins") in print(p.name());
let x: Number = 42 in print(x);
function tan(x: Number): Number => sin(x) / cos(x);
type Point(x: Number, y: Number) {   x: Number = x; y: Number = y;}
type Bird {} type Plane {} type Superman { } let x = new Superman() in print( if (x is Bird) "It's bird!" elif (x is Plane) "It's a plane!" else "No, it's Superman!" );
type A { } type B inherits A { } type C inherits A { }
let x : A = if (rand() < 0.5) new B() else new C() in if (x is B) let y : B = x as B in {  } else { }
function fib(n) => if (n == 0 | n == 1) 1 else fib(n-1) + fib(n-2);
function fact(x) => let f = 1 in for (i in range(1, x+1)) f := f * i;
protocol Hashable { hash(): Number; }
protocol Equatable extends Hashable { equals(other: Object): Boolean; }
type Person { hash() : Number { } }
let x : Hashable = new Person() in print(x.hash());
protocol Iterable {     next() : Boolean; current() : Object;}
type Range(min:Number, max:Number) { min = min; max = max; current = min - 1; next(): Boolean => (self.current := self.current + 1) < max; current(): Number => self.current;}
for (x in range(0,10)) {    }
let iterable = range(0, 10) in     while (iterable.next()) let x = iterable.current() in {  }
let numbers = [1,2,3,4,5,6,7,8,9] in for (x in numbers) print(x);
let numbers = [1,2,3,4,5,6,7,8,9] in print(numbers[7]);
let squares = [x^2 || x in range(1,10)] in print(x);



